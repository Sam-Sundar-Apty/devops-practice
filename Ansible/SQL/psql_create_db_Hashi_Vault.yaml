---
- name: Restore PSQL on different Server
  hosts: db_servers_master
  become: yes
  vars:
     db_name: employee_db
     db_user: db_user
     #db_password: Passw0rd

  tasks:

      - name: Backup PostgreSQL
        postgresql_db:
                name: "{{ db_name }}"
                state: dump
                target: /tmp/PSQL_dump.sql
        become_user: postgres

      - name: "Fetch DB Files"
        fetch:
             src: /tmp/PSQL_dump.sql
             dest: /home/ec2-user/
             mode: 0777
             flat: true
             ignore_errors: yes

      - name: copy to slaves
        copy:
           src: /home/ec2-user/PSQL_dump.sql
           dest: /tmp

      - name: Change Perm
        shell: chmod 777 /tmp/PSQL_dump.sql
        delegate_to: '{{ groups.db_servers_slaves[0] }}'
---
- name: Install PSQL
  hosts: db_servers_slaves
  become: yes
  vars:
     db_name: employee_db
     db_user: db_user
     password_vault: "{{ lookup('hashi_vault', 'secret=/secret/data/psql_db_user_password token=s.f25apx4UamivtWigU9uCfTdt url=http://13.126.134.85:8200 validate_certs=false') }}"
     #db_password: Passw0rd

  tasks:
  
      - name: Install PIP
        yum: name=python-pip update_cache=true state=present

      - name: Install hvac python package for Hashicorp Lookup module to work
        pip: name={{ item }}
        with_items:
               - hvac
        ignore_errors: yes

#      - name: Get Password from hashicorp vault
#         msg: "{{ password_vault.data.password }}"
#        register: hashi_vault_psql_db_password
#        delegate_to: localhost

      - name: Install PostgreSQL
        yum: name={{ item }} update_cache=true state=present
        with_items:
          - postgresql
          - postgresql-contrib
          - python-psycopg2
          - postgresql-server
          - postgresql-devel
          - postgresql-contrib
          - postgresql-docs
        tags: packages

      - name: initdb
        shell: sudo service postgresql initdb
        ignore_errors: yes
        
      - name: Ensure the PostgreSQL service is running
        service: name=postgresql state=started enabled=yes

      - name: Ensure database is created
        postgresql_db: name={{ db_name }}
                   encoding='UTF-8'
                   lc_collate='en_US.UTF-8'
                   lc_ctype='en_US.UTF-8'
                   template='template0'
        become_user: postgres
        
      - name: Ensure user has access to the database
        postgresql_user: db={{ db_name }}
                     name={{ db_user }}
#                     password={{ item }}
                     password="{{ demo.data.password }}"
                     priv=ALL
                     state=present
        become_user: postgres
#        with_items: "{{ hashi_vault_psql_db_password.stdout_lines }}"

      - name: Ensure user does not have unnecessary privileges
        postgresql_user: name={{ db_user }}
                     role_attr_flags=NOSUPERUSER,NOCREATEDB
                     state=present
        become_user: postgres

      - name: import database and restore
        postgresql_db:
            name: "{{ db_name }}"
            state: restore
            target: /tmp/PSQL_dump.sql
        delegate_to: '{{ groups.db_servers_slaves[0] }}'
        become: yes
        become_user: postgres